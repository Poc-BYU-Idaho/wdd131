:root {
    --primary-color: #FFFFFF;
    --secondary-color: #000000;
    --accent1-color: #1B1188;
    --accent2-color: #8650C1;
  
    --font: arial, sans-serif;
}

body {
    font-family: var(--font);
    margin: 0;
}

header a img {
    /* This has to be displayed as block in order for the margin property to center it correctly. I think it's because the auto value adjusts the left and right margins to split the available horizontal space equally. If the element's edges are at the edges of the screen (because it's displayed as block), the available horizontal space is the entire width of the screen, and auto will center it properly. If it's displayed inline, there's no available horizontal space at the sides of the element because the element only takes up as much space as it is big.  */
    display: block;
    margin: 50px auto 20px auto;
    width: 500px;
}

#miniLogo {
    display: none;
}

header p {
    width: 70%;
    margin: 0 auto;
    font-size: 1.4em;
    line-height: 35px;
    margin-bottom: 10px;
}


#colorBand1 {
    width: 100%;
    height: 20px;
    background-color: var(--accent1-color);
}

#colorBand2 {
    width: 100%;
    height: 10px;
    background-color: var(--accent2-color);
    margin-bottom: 20px;
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 80%;
    margin: 0 auto;
}

#searchLabel {
    display: none;
}

#searchInputBox {
    height: 40px;
    width: 100%;
    font-size: 1.3em;

    /* This has to be displayed as block in order for margin: 0 auto to center it correctly. */
    display: block;
    margin: 0 auto;
}

#muscleCheckboxes {
    width: 100%;
    margin-top: 20px;
    display: flex;
    justify-content: space-evenly;
}

#muscleCheckboxes label {
    font-size: 1.3em;
}

#muscleCheckboxes input {
    transform: scale(1.8);
}

main p {
    align-self: flex-start;
    margin-top: 20px;
    margin-bottom: 2px;
    font-size: 1.5em;
}

#searchResultsBox {
    height: 440px;
    width: 100%;
    overflow-y: auto;
    border: 1px solid var(--secondary-color);

    /* This prevents the box from touching the bottom of the page when the viewport is smaller. */
    margin-bottom: 50px;
}

#searchResultsBox li {
    margin-bottom: 10px;
}

#searchResultsBox li a {
    font-size: 1.4em;
    color: var(--secondary-color);
}





/* Put a grid in place for the checkboxes when they start squeezing together to tightly. */
@media screen and (max-width: 900px) {
    header p {
        font-size: 1.3em;
    }

    #muscleCheckboxes {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        row-gap: 20px;

        /* The checkboxes are right aligned (see selector below), which makes the checkboxes all shift to the right. Moving the grid to the start of the flexbox and shortening its width helps to fix this unintended effect. */
        align-self: flex-start;
        width: 85%;
    }

    #muscleCheckboxes div {
        /* This makes it so the boxes line up with each other. Otherwise, they're offset because their corresponding muscles have different length names. */
        text-align: right;
    }

    #tricepsCheckbox {
        grid-column: 2 / 3;
    }
}



/* Adjustments for when the display becomes narrow, like on mobile. */
@media screen and (max-width: 600px) {
    header p {
        /* display: none; */
        font-size: 1em;
    }

    #logo {
        display: none;
    }

    #miniLogo {
        display: block;
        width: 130px;
    }

    #muscleCheckboxes {
        width: 100%;
    }

    #muscleCheckboxes label {
        font-size: 1em;
    }

    #muscleCheckboxes input {
        transform: scale(1.5);
    }

    main div div {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
}
